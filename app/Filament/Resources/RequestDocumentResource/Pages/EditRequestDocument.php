<?php

namespace App\Filament\Resources\RequestDocumentResource\Pages;

use App\Filament\Resources\RequestDocumentResource;
use App\Models\RequestDocument;
use App\Models\User;
use Carbon\Carbon;
use Filament\Actions\Action;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\EditRecord;
use Illuminate\Contracts\View\View;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;

class EditRequestDocument extends EditRecord
{
    protected static string $resource = RequestDocumentResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Action::make('view')
                ->label('Show File')
                ->icon('heroicon-o-eye')
                ->visible(function ($record) {
                    return $record->status == 'approved';
                })
                ->modalContent(function ($record): View {
                    return view('filament.pages.display-pdf', [
                        'file' => $record,
                    ]);
                })
                ->modalCancelAction(false)
                ->modalSubmitAction(false)
                ->modalWidth('full'),
        ];
    }

    protected function handleRecordUpdate(Model $record, array $data): Model
    {
        if ($data['status'] == 'approved') {
            $record->file_path = $this->generatePDF($data, $record);

            Notification::make()
                ->title('Document has been generated by '.auth()->user()->name)
                ->success()
                ->sendToDatabase(User::where('id', $record->user_id)->first());
        }

        $record->update($data);

        return $record;
    }

    public function generatePDF($data, $record)
    {

        $user = User::where('id', $record->user_id)->first();

        if ($record->type == 'barangay_id') {
            $id_data = [
                'name' => $data['custom_fields']['name'],
                'purok' => $data['custom_fields']['purok'],
                'date_of_birth' => $data['custom_fields']['date_of_birth'],
                'age' => ceil(Carbon::parse($data['custom_fields']['date_of_birth'])->diffInYears(Carbon::now())),
                'civil_status' => $data['custom_fields']['civil_status'],
                'citizenship' => $data['custom_fields']['citizenship'],
                'gender' => $data['custom_fields']['gender'],
                'weight' => $data['custom_fields']['weight'],
                'height' => $data['custom_fields']['height'],
                'blood_type' => $data['custom_fields']['blood_type'],
                'emergency_name' => $data['custom_fields']['emergency_name'],
                'emergency_relation' => $data['custom_fields']['emergency_relation'],
                'emergency_address' => $data['custom_fields']['emergency_address'],
                'emergency_contact_number' => $data['custom_fields']['emergency_contact_number'],
                'control_number' => $data['custom_fields']['control_number'] ?? '',
                // 'id_no' => $this->barangayIDNumber(),
            ];

            $pdfContent = \PDF::loadView('pdf.barangay_id', $id_data);
        } else {
            $certificate_data = [
                'name' => $data['custom_fields']['name'],
                'civil_status' => $data['custom_fields']['civil_status'],
                'gender' => ucfirst($data['custom_fields']['gender']),
                'age' => ceil(Carbon::parse($data['custom_fields']['date_of_birth'])->diffInYears(Carbon::now())),
                'address' => $data['custom_fields']['address'],
                // 'certificate_number' => $this->generateCertificateNumber(),
                'cert_no' => $data['custom_fields']['cert_no'],
                'purpose' => $data['custom_fields']['purpose'],
                'auth_name' => $data['custom_fields']['auth_name'] ?? '',
                'auth_position' => $data['custom_fields']['auth_position'] ?? '',
                'auth_script' => !empty($data['is_punong_barangay_not_available']) ? 'By the authority of the Punong Barangay' : '',
                'date_of_issue' => Carbon::now()->format('d-m-Y'),
                'control_number' => $data['custom_fields']['control_number'] ?? '',
            ];

            $pdfContent = \PDF::loadView('pdf.barangay_clearance', $certificate_data)
                ->setPaper('letter', 'portrait');
        }

        $filePath = 'pdfs/user_'.$user->id.'_'.time().'.pdf';
        Storage::put($filePath, $pdfContent->output());

        return $filePath;
    }

    public function barangayIDNumber()
    {
        $document = RequestDocument::where('type', 'barangay_id')->count();

        return now()->format('Y').'-'.$document;
    }

    public function age()
    {
        return ceil(Carbon::parse($this->date_of_birth)->diffInYears(Carbon::now()));
    }

    public function generateCertificateNumber(): string
    {
        do {
            // Generate a random 10-digit number
            $certificateNumber = 'RD'.random_int(1000000, 9999999); // Adjust the range as needed
        } while (RequestDocument::where('id', $certificateNumber)->exists());

        return $certificateNumber;
    }
    //Naa ra diay diri ang certificate number
}
